from typing import Protocol
from .planner_task import PlannerTask


class PlannerProtocol(Protocol):
    """This class defines the protocol for the planner plugin.
    It is used to define the methods that a storage implementation for the planner plugin needs to implement
    in order to be used by the plugin.
    """

    def run_planning_cycle(self, name: str = "PlannerGPT") -> str:
        """This method is called when the run_planning_cycle command is called.
        It is supposed to run a planning cycle for the agent identified with the name parameter.

        TODO: see if needed
        """
        pass

    def get_current_task(self, name: str = "PlannerGPT") -> PlannerTask:
        """This method is called when the get_current_task command is called.
        It is supposed to return the current task for the agent identified with the name parameter.

        Args:
            name (str, optional): The name of the agent. Defaults to "PlannerGPT".
        Returns:
            PlannerTask: the current task"""
        pass

    def get_task_for_id(self, task_id: str, name: str = "PlannerGPT") -> PlannerTask:
        """This method is called when the get_task_for_id command is called.
        It is supposed to return the task for the agent identified with the name parameter.

        Args:
            task_id (str): The task id to be returned.
            name (str, optional): The name of the agent. Defaults to "PlannerGPT".
        Returns:
            PlannerTask: the task"""
        pass

    def add_task(self, task: PlannerTask, name: str = "PlannerGPT") -> str:
        """This method is called when the add_task command is called.
        It is supposed to add a task for the agent identified with the name parameter.

        the task_id needs to be generated by the planner implementation.

        Args:
            task (PlannerTask): The task to be added.
            name (str, optional): The name of the agent. Defaults to "PlannerGPT".
        Returns:
            str: the task id"""
        pass

    def complete_task(self, task: PlannerTask, name: str = "PlannerGPT"):
        """This method is called when the complete_task command is called.
        It is supposed to complete a task for the agent identified with the name parameter.

        Args:
            task (PlannerTask): The task to be completed.
            name (str, optional): The name of the agent. Defaults to "PlannerGPT".
        """
        pass

    def optimize_schedule(self, name: str = "PlannerGPT"):
        """This method is called when the optimize_schedule command is called."""
        pass
